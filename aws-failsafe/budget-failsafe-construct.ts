import { Construct } from "constructs";
import { Topic } from "aws-cdk-lib/aws-sns";
import { CfnBudget } from "aws-cdk-lib/aws-budgets";
import * as lambda from "aws-cdk-lib/aws-lambda";
import { SnsEventSource } from "aws-cdk-lib/aws-lambda-event-sources";
import { NodejsFunction } from "aws-cdk-lib/aws-lambda-nodejs";
import path = require("path");
import { PolicyStatement } from "aws-cdk-lib/aws-iam";

// Monthly is the most frequent budget available for Cost based budgets.
const MONTHLY_DOLLARS_LIMIT = 5
const EMAIL_ADDRESS = '*your email*'

export class BudgetFailsafeConstruct extends Construct {
    budget: CfnBudget
    snsTopic: Topic
    lambdaFunction: NodejsFunction

    constructor(parent: Construct) {
        super(parent, 'BudgetFailsafeConstruct')

        this.snsTopic = new Topic(this, 'SNSTopic', {
            topicName: 'BudgetFailsafe-SNS-Topic'
        })

        this.lambdaFunction = new NodejsFunction(this, 'Lambda', {
            entry: path.resolve(__dirname, '../../lambda_src/budget_failsafe/index.ts'),
            functionName: 'budget-failsafe-lambda',
            handler: 'handler',
            runtime: lambda.Runtime.NODEJS_20_X,
        })
        this.lambdaFunction.addEventSource(new SnsEventSource(this.snsTopic))
        this.lambdaFunction.addToRolePolicy(PolicyStatement.fromJson({
            "Sid": "Stmt1723675484336",
            "Action": [
                "cloudfront:GetDistributionConfig",
                "cloudfront:UpdateDistribution"
            ],
            "Effect": "Allow",
            "Resource": "*POTENTIALLY CONFIDENTIAL*"
        }))

        this.budget = new CfnBudget(this, 'Budget', {
            budget: {
                budgetName: 'Failsafe Budget -- Generated by CDK',
                timeUnit: 'MONTHLY',
                budgetType: 'COST',
                budgetLimit: {
                    amount: MONTHLY_DOLLARS_LIMIT,
                    unit: 'USD'
                },
                costTypes: {
                    includeCredit: true,
                    includeDiscount: true,
                    includeOtherSubscription: true,
                    includeRecurring: true,
                    includeRefund: true,
                    includeSubscription: true,
                    includeSupport: true,
                    includeTax: true,
                    includeUpfront: true,
                    useAmortized: false,
                    useBlended: false
                }
            },
            notificationsWithSubscribers: [
                {
                    notification: {
                        notificationType: 'FORECASTED',
                        thresholdType: 'PERCENTAGE',
                        threshold: 100,
                        comparisonOperator: 'GREATER_THAN'
                    },
                    subscribers: [
                        {
                            address: EMAIL_ADDRESS,
                            subscriptionType: 'EMAIL'
                        },
                        {
                            address: this.snsTopic.topicArn,
                            subscriptionType: 'SNS'
                        }
                    ]
                },
                {
                    notification: {
                        notificationType: 'ACTUAL',
                        thresholdType: 'PERCENTAGE',
                        threshold: 100,
                        comparisonOperator: 'GREATER_THAN'
                    },
                    subscribers: [
                        {
                            address: EMAIL_ADDRESS,
                            subscriptionType: 'EMAIL'
                        },
                        {
                            address: this.snsTopic.topicArn,
                            subscriptionType: 'SNS'
                        }
                    ]
                }
            ]
        })
    }
}
